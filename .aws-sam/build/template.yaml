AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: mktanon site
Globals:
  Function:
    Timeout: 30
    Runtime: python3.10
    MemorySize: 1024
Parameters:
  RotateInterval:
    Default: '7'
    Description: Rotation interval in days for origin secret value.
    Type: Number
    MinValue: '1'
  LogRetention:
    Default: '30'
    Description: Log retention period for HTTP API access logs
    Type: Number
    MinValue: '1'
Resources:
  sampleWebsiteLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Sample Hello World Lambda
      CodeUri: sampleWebsiteLambdaFunction
      Handler: sample_function.lambda_handler
      Role:
        Fn::GetAtt:
        - sampleWebsiteLambdaFunctionRole
        - Arn
    Metadata:
      SamResourceId: sampleWebsiteLambdaFunction
  sampleWebsiteLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: SampleWebsiteLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:*
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:*:log-stream:*
  OriginVerifySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: OriginVerifySecret
      GenerateSecretString:
        SecretStringTemplate: '{"HEADERVALUE": "RandomPassword"}'
        GenerateStringKey: HEADERVALUE
        ExcludePunctuation: true
  RotateFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: OriginSecretRotateFunction
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com
  OriginVerifyRotateSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      RotationLambdaARN:
        Fn::GetAtt:
        - OriginSecretRotateFunction
        - Arn
      RotationRules:
        AutomaticallyAfterDays:
          Ref: RotateInterval
      SecretId:
        Ref: OriginVerifySecret
  OriginSecretRotateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: OriginVerifyRotatePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:*
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:*:log-stream:*
          - Effect: Allow
            Action:
            - secretsmanager:DescribeSecret
            - secretsmanager:GetSecretValue
            - secretsmanager:PutSecretValue
            - secretsmanager:UpdateSecretVersionStage
            Resource:
              Ref: OriginVerifySecret
          - Effect: Allow
            Action:
            - secretsmanager:GetRandomPassword
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudfront:GetDistribution
            - cloudfront:GetDistributionConfig
            - cloudfront:ListDistributions
            - cloudfront:UpdateDistribution
            Resource:
              Fn::Sub: arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${cloudFrontDistribution}
  OriginSecretRotateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Secrets Manager Rotation Lambda
      Handler: originSecretRotateFunction.lambda_handler
      CodeUri: OriginSecretRotateFunction
      Environment:
        Variables:
          CFDISTROID:
            Ref: cloudFrontDistribution
          HEADERNAME: x-origin-verify
          ORIGINURL:
            Fn::Sub: https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com
      Role:
        Fn::GetAtt:
        - OriginSecretRotateExecutionRole
        - Arn
    Metadata:
      SamResourceId: OriginSecretRotateFunction
  authorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Authorizer Lambda Function
      Timeout: 900
      CodeUri: authorizerLambda
      Handler: authorizerFunction.lambda_handler
      Role:
        Fn::GetAtt:
        - authorizerLambdaFunctionRole
        - Arn
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
    Metadata:
      SamResourceId: authorizerLambda
  authorizerLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AuthorizerRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:*
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:*:log-stream:*
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:OriginVerifySecret-*
  apiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: HTTP
      Name: APIGateway
  apiGwRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: apiGateway
      RouteKey: GET /
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: apiGwAuthorizer
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: apiGwIntegration
  apiGwIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: apiGateway
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri:
        Fn::Sub:
        - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
        - lambdaArn:
            Fn::GetAtt:
            - sampleWebsiteLambdaFunction
            - Arn
      PayloadFormatVersion: '2.0'
  apiGwStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      AutoDeploy: true
      ApiId:
        Ref: apiGateway
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
          - apiLogGroup
          - Arn
        Format: '{"requestId":"$context.requestId", "ip": "$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","routeKey":"$context.routeKey","status":"$context.status"}'
  apiGwAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: LambdaAuthorizer
      ApiId:
        Ref: apiGateway
      AuthorizerType: REQUEST
      EnableSimpleResponses: true
      AuthorizerPayloadFormatVersion: '2.0'
      AuthorizerUri:
        Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authorizerLambda.Arn}/invocations
      IdentitySource:
      - $request.header.x-origin-verify
  authorizerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: authorizerLambda
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*
        - __Stage__: '*'
          __ApiId__:
            Ref: apiGateway
  sampleWebsiteLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: sampleWebsiteLambdaFunction
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*
        - __Stage__: '*'
          __ApiId__:
            Ref: apiGateway
  apiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: HTTPApiAccessLogs
      RetentionInDays:
        Ref: LogRetention
  cloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: apiGwOrigin
          CustomOriginConfig:
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
            OriginSSLProtocols:
            - TLSv1.2
          DomainName:
            Fn::Sub: ${apiGateway}.execute-api.${AWS::Region}.amazonaws.com
          OriginCustomHeaders:
          - HeaderName: x-origin-verify
            HeaderValue:
              Fn::Join:
              - ''
              - - '{{resolve:secretsmanager:'
                - Ref: OriginVerifySecret
                - :SecretString:HEADERVALUE}}
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: apiGwOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: 'false'
  MktAnonSiteFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  MktAnonApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
        - https://mktanon.com
        - http://127.0.0.1:5506
        AllowMethods:
        - POST
        AllowHeaders:
        - '*'
  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateFunction
      Handler: createFunction.lambda_handler
      Layers:
      - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p310-pandas:13
      Role:
        Fn::GetAtt:
        - MktAnonSiteFunctionRole
        - Arn
      Events:
        UploadCsvApiCalled:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: MktAnonApi
            Path: /create
            Method: post
    Metadata:
      SamResourceId: CreateFunction
Outputs:
  UploadCsvApiEndpoint:
    Description: API endpoint URL for uploading CSV
    Value:
      Fn::Sub: https://${MktAnonApi}.execute-api.${AWS::Region}.amazonaws.com/create
  OriginVerifySecret:
    Description: Secrets Manager Secret for Origin Validation
    Value:
      Fn::Sub: https://console.aws.amazon.com/secretsmanager/home?region=${AWS::Region}#/secret?name=${OriginVerifySecret}
  cfEndpoint:
    Description: Test website - CloudFront endpoint
    Value:
      Fn::Join:
      - ''
      - - https://
        - Fn::GetAtt:
          - cloudFrontDistribution
          - DomainName
  cfDistro:
    Description: CloudFront distribution associated with test website
    Value:
      Fn::Sub: https://${AWS::Region}.console.aws.amazon.com/cloudfront/v3/home?region=${AWS::Region}#/distributions/${cloudFrontDistribution}
  apiEndpoint:
    Description: HTTP API Domain URL
    Value:
      Fn::Sub: ${apiGateway.ApiEndpoint}
  HTTPApi:
    Description: CloudFront distribution associated with test website
    Value:
      Fn::Sub: https://console.aws.amazon.com/apigateway/main/api-detail?api=${apiGateway}&region=${AWS::Region}
  OriginSecretRotateFunction:
    Value:
      Fn::Sub: https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${OriginSecretRotateFunction}
    Description: Secrets Manager Rotation Lambda Function
  LambdaAuthorizerFunction:
    Description: The API Gateway Authorizer Lambda Function
    Value:
      Fn::Sub: https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${authorizerLambda}
